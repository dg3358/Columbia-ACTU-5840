dim(mdata) <- c(7,3)
colnames(mdata) <- c('x_1','x_2','x_3')
sqdist <- mdata^2 %>% rowSums
dist <- sqdist^(0.5)
obs_data <- KNN_data[c('x_1','x_2','x_3')]
vec_data <- obs_data %>% as.matrix %>% as.numeric
mdata <- vec_data %>% as.vector
dim(mdata) <- c(7,3)
colnames(mdata) <- c('x_1','x_2','x_3')
sqdist <- mdata^2 %>% rowSums
dist <- sqdist^(0.5)
as.data.frame(cbind(1:7,dist), colnames = c('Obs','Dist'))
obs_data <- KNN_data[c('x_1','x_2','x_3')]
vec_data <- obs_data %>% as.matrix %>% as.numeric
mdata <- vec_data %>% as.vector
dim(mdata) <- c(7,3)
colnames(mdata) <- c('x_1','x_2','x_3')
sqdist <- mdata^2 %>% rowSums
dist <- sqdist^(0.5)
as.data.frame(cbind(1:7,dist), colnames = c('Obs','Dist'))
obs_data <- KNN_data[c('x_1','x_2','x_3')]
vec_data <- obs_data %>% as.matrix %>% as.numeric
mdata <- vec_data %>% as.vector
dim(mdata) <- c(7,3)
colnames(mdata) <- c('x_1','x_2','x_3')
sqdist <- mdata^2 %>% rowSums
dist <- sqdist^(0.5)
as.data.frame(cbind(1:7,dist), colnames = c('Obs','Dist'))
?as.data.frame
obs_data <- KNN_data[c('x_1','x_2','x_3')]
vec_data <- obs_data %>% as.matrix %>% as.numeric
mdata <- vec_data %>% as.vector
dim(mdata) <- c(7,3)
colnames(mdata) <- c('x_1','x_2','x_3')
sqdist <- mdata^2 %>% rowSums
dist <- sqdist^(0.5)
as.data.frame(cbind(1:7,dist), col.names = c('Obs','Dist'))
obs_data <- KNN_data[c('x_1','x_2','x_3')]
vec_data <- obs_data %>% as.matrix %>% as.numeric
mdata <- vec_data %>% as.vector
dim(mdata) <- c(7,3)
colnames(mdata) <- c('x_1','x_2','x_3')
sqdist <- mdata^2 %>% rowSums
dist <- sqdist^(0.5)
distdata <- as.data.frame(cbind(1:7,dist))
colnames(distdata) <- c('Obs','dist')
distdata
crimnox <- ggplot(data = Boston) + geom_point(aes(x = nox, y = crim))
crimdis <- ggplot(data = Boston) + geom_point(aes(x = dis, y = crim))
crimage <- ggplot(data = Boston) + geom_point(aes(x = age, y = crim))
crimr <- ggplot(data = Boston) + geom_point(aes(ptratio,crim))
((crimnox+plot_spacer()+crimdis+plot_layout(widths = c(6,0.5,6)))/
plot_spacer()/
(crimage+plot_spacer()+crimr+plot_layout(widths = c(6,0.5,6))))+
plot_layout(heights = c(6, 0.5, 6))
View(FreeThrowAttemptsPerGame)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
# import packages
library(ggplot2)
library(magrittr)
# read in data
# WNH <- read.csv(file)
WNH <- read.csv('WiscNursingHome.csv', header = TRUE)
WNH$CRYEAR <- factor(WNH$CRYEAR)
WNH <- WNH[WNH$CRYEAR == 2001,]
#Generate variables to analyze
WNH$LOGTPY <- log(WNH$TPY)
WNH$LOGNUMBED <- log(WNH$NUMBED)
x <- cbind(1,WNH$LOGNUMBED)
xTx <- t(x) %*% x
xTx
xTxInv <- solve(xTx)
xTxInv
y <- WNH$LOGTPY
xTy <- t(x) %*% y
xTy
beta <- xTxInv %*% xTy
beta
H <- x %*% xTxInv %*% t(x)
leverages <- diag(H)
head(leverages)
pred <- H %*% y
head(pred)
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(len(WNH) - 2))/(SST/(len(WNH)- 1))
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- count(WNH)
?size
?length
length(WNH)
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
R_2 <- SSR/SST
length(WNH$CRYEAR)
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
?df
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - df(F_stat, 1, n - 2)
p_reg
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
p_reg
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
?names
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
sumStats <- vector(R_2, R_2_adj, F_stat, p_reg, MSE)
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
sumStats <- vector(c(R_2, R_2_adj, F_stat, p_reg, MSE))
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
sumStats <- c(R_2, R_2_adj, F_stat, p_reg, MSE)
names(sumStats) <- c("R^2", "adj. R^2", "F", "p-val", "MSE")
sumStats
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
sumStats <- c(R_2, R_2_adj, F_stat, p_reg, MSE)
names(sumStats) <- c("R^2", "adj. R^2", "F", "p-val", "MSE")
t(sumStats)
?t
sumStats
t(sumStats)
sumStats$R_2
sumStats['R_2']
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
sumStats <- c(R_2, R_2_adj, F_stat, p_reg, MSE)
names(sumStats) <- c("R^2", "adj. R^2", "F", "p-val", "MSE")
t(sumStats)
resid <- WNH$LOGTPY - pred
resid_std <- resid/(sqrt(MSE) * sqrt(1 - leverages))
resid <- WNH$LOGTPY - pred
resid_std <- resid/(sqrt(MSE) * sqrt(1 - leverages))
c(head(resid), head(resid_std))
resid <- WNH$LOGTPY - pred
resid_std <- resid/(sqrt(MSE) * sqrt(1 - leverages))
cbind(head(resid), head(resid_std))
f6res
resid <- WNH$LOGTPY - pred
resid_std <- resid/(sqrt(MSE) * sqrt(1 - leverages))
f6res <- cbind(head(resid), head(resid_std))
colnames(f6res) <- c("Residuals", "Std. Residuals")
f6res
resid <- WNH$LOGTPY - pred
resid_std <- resid/(sqrt(MSE) * sqrt(1 - leverages))
f6res <- cbind(head(resid), head(resid_std))
colnames(f6res) <- c("Residuals", " Std. Residuals")
f6res
se_beta <- \sqrt{MSE} * \sqrt{xTxInv[2,2]}
se_beta <- sqrt(MSE) * sqrt(xTxInv[2,2])
t_stat <- beta[2]/se_beta
t_stat
p_beta1 <- 1 - pf(t_stat, 1, n - 2)
p_beta1
lCI05 <- beta[2]
pnorm(0.5, 0, 1)
lCI05 <- beta[2]
pnorm(0, 0, 1)
lCI05 <- beta[2]
qnorm(0.5, 0, 1)
lCI05 <- beta[2]
qnorm(2, 0, 1)
lCI05 <- beta[2]
qnorm(0.95, 0, 1)
lCI05 <- beta[2]
qnorm(0.975, 0, 1)
lCI05 <- beta[2] - qnorm(0.975, 0, 1)*se_beta
rCI05 <- beta[2] + qnorm(0.975, 0, 1)*se_beta
c(lCI05, rCI05)
?matrix
lCI05 <- beta[2] - qnorm(0.975, 0, 1)*se_beta
rCI05 <- beta[2] + qnorm(0.975, 0, 1)*se_beta
lCI01 <- beta[2] - qnorm(0.995, 0, 1)*se_beta
rCI01 <- beta[2] + qnorm(0.995, 0, 1)*se_beta
CIMatrix <- matrix(data = c(lCI05,rCI05,lCI01,rCI01), nrow = 2)
CIMatrix
lCI05 <- beta[2] - qnorm(0.975, 0, 1)*se_beta
rCI05 <- beta[2] + qnorm(0.975, 0, 1)*se_beta
lCI01 <- beta[2] - qnorm(0.995, 0, 1)*se_beta
rCI01 <- beta[2] + qnorm(0.995, 0, 1)*se_beta
CIMatrix <- matrix(data = c(lCI05,lCI01,rCI05,rCI01), nrow = 2)
CIMatrix
CIMatrix
lCI05 <- beta[2] - qnorm(0.975, 0, 1)*se_beta
rCI05 <- beta[2] + qnorm(0.975, 0, 1)*se_beta
lCI01 <- beta[2] - qnorm(0.995, 0, 1)*se_beta
rCI01 <- beta[2] + qnorm(0.995, 0, 1)*se_beta
CIMatrix <- matrix(data = c(lCI05,lCI01,rCI05,rCI01), nrow = 2)
rownames(CIMatrix) <- c("95% conf.", "99% conf.")
colnames(CIMatrix) <- c("Lower CI", "Upper CI")
CIMatrix
pred100 <- beta[1] + beta[2]*ln(100)
pred100 <- beta[1] + beta[2]*log(100)
num <- (ln(100) - average(WNH$LOGTPY))^2
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - average(WNH$LOGTPY))^2
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
lpred
CIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
CIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
lCI05 <- beta[2] - qnorm(0.975, 0, 1)*se_beta
rCI05 <- beta[2] + qnorm(0.975, 0, 1)*se_beta
lCI01 <- beta[2] - qnorm(0.995, 0, 1)*se_beta
rCI01 <- beta[2] + qnorm(0.995, 0, 1)*se_beta
CIMatrix <- matrix(data = c(lCI05,lCI01,rCI05,rCI01), nrow = 2)
rownames(CIMatrix) <- c("95% conf.", "99% conf.")
colnames(CIMatrix) <- c("Lower CI", "Upper CI")
CIMatrix
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
PIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
PIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
PIMatrix
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
PIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
colnames(PIMatrix) <- c("Lower PI", "Upper PI")
PIMatrix
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
PIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
colnames(PIMatrix) <- c("Lower PI", "Upper PI")
pred
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
PIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
colnames(PIMatrix) <- c("Lower PI", "Upper PI")
pred100
PIMatrix
model <- lm("LOGTPY ~ LOGNUMBED", data = WNH)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
# import packages
library(ggplot2)
library(magrittr)
# read in data
# WNH <- read.csv(file)
WNH <- read.csv('WiscNursingHome.csv', header = TRUE)
WNH$CRYEAR <- factor(WNH$CRYEAR)
WNH <- WNH[WNH$CRYEAR == 2001,]
#Generate variables to analyze
WNH$LOGTPY <- log(WNH$TPY)
WNH$LOGNUMBED <- log(WNH$NUMBED)
x <- cbind(1,WNH$LOGNUMBED)
xTx <- t(x) %*% x
xTx
xTxInv <- solve(xTx)
xTxInv
y <- WNH$LOGTPY
xTy <- t(x) %*% y
xTy
beta <- xTxInv %*% xTy
beta
H <- x %*% xTxInv %*% t(x)
leverages <- diag(H)
head(leverages)
pred <- H %*% y
head(pred)
SSR <- sum((mean(WNH$LOGTPY) - pred)^2)
SSE <- sum((WNH$LOGTPY - pred)^2)
SST <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
n <- length(WNH$CRYEAR)
R_2 <- SSR/SST
R_2_adj <- 1 - (SSE/(n - 2))/(SST/(n - 1))
F_stat <- (SST - SSE)/(SSE/(n - 2))
p_reg <- 1 - pf(F_stat, 1, n - 2)
MSE <- SSE/(n - 2)
sumStats <- c(R_2, R_2_adj, F_stat, p_reg, MSE)
names(sumStats) <- c("R^2", "adj. R^2", "F", "p-val", "MSE")
t(sumStats)
resid <- WNH$LOGTPY - pred
resid_std <- resid/(sqrt(MSE) * sqrt(1 - leverages))
f6res <- cbind(head(resid), head(resid_std))
colnames(f6res) <- c("Residuals", " Std. Residuals")
f6res
se_beta <- sqrt(MSE) * sqrt(xTxInv[2,2])
t_stat <- beta[2]/se_beta
t_stat
p_beta1 <- 1 - pf(t_stat, 1, n - 2)
p_beta1
lCI05 <- beta[2] - qnorm(0.975, 0, 1)*se_beta
rCI05 <- beta[2] + qnorm(0.975, 0, 1)*se_beta
lCI01 <- beta[2] - qnorm(0.995, 0, 1)*se_beta
rCI01 <- beta[2] + qnorm(0.995, 0, 1)*se_beta
CIMatrix <- matrix(data = c(lCI05,lCI01,rCI05,rCI01), nrow = 2)
rownames(CIMatrix) <- c("95% conf.", "99% conf.")
colnames(CIMatrix) <- c("Lower CI", "Upper CI")
CIMatrix
pred100 <- beta[1] + beta[2]*log(100)
num <- (log(100) - mean(WNH$LOGTPY))^2
denom <- sum((WNH$LOGTPY - mean(WNH$LOGTPY))^2)
lpred <- pred100 - qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
upred <- pred100 + qnorm(0.975, 0, 1)*sqrt(MSE)*sqrt(1 + 1/n + num/denom)
PIMatrix <- matrix(data = c(lpred, upred), nrow = 1)
colnames(PIMatrix) <- c("Lower PI", "Upper PI")
pred100
PIMatrix
model <- lm("LOGTPY ~ LOGNUMBED", data = WNH)
summary(model)
X.median <- numeric(5000)
for (i in 1:5000) {
X <- norm(rnorm = 99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
?rnorm
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
X.median <- numeric(5000)
set.seed(15)
for (i in 1:5000) {
X <- rnorm(99, mean = 0, sd = 1)
X.median[i] <- median(X)
}
source("C:/Users/Dennis Goldenberg/OneDrive/Desktop/Columbia University - OneDrive/Columbia University Classes/2024 - 1 (Spring 2024)/Statistical Inference (STAT 4204)/HW 2/median.R", echo=TRUE)
Sys.getenv("PATH")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(readxl)
library(ggplot2)
install.packages("cellranger")
library(readxl)
carbData <- read.excel("Table 6.3 Carbohydrate diet-1.xls", header = TRUE, skip = 2, sheet = "Sheet1")
carbData <- read_excel("Table 6.3 Carbohydrate diet-1.xls", header = TRUE, skip = 2, sheet = "Sheet1")
carbData <- read_excel("Table 6.3 Carbohydrate diet-1.xls", skip = 2, sheet = "Sheet1")
carbData
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(readxl)
