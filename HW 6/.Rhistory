tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
if (j == 2){
#testVar <- data.frame(tempTest$lstat)
#colnames(testVar) <- c("lstat")
#resultsMatrix[i,j] = predict(tempMod, testVar)
} else {
#resultsMatrix[i,j] = predict(tempMod, data.frame(tempTest[,1:j]))
predict(tempMod, data.frame(tempTest[,2:j]))
}
}
}
print(class(tempTest$lstat))
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
if (j == 2){
#testVar <- data.frame(tempTest$lstat)
#colnames(testVar) <- c("lstat")
#resultsMatrix[i,j] = predict(tempMod, testVar)
} else {
#resultsMatrix[i,j] = predict(tempMod, data.frame(tempTest[,1:j]))
predict(tempMod, tempTest)
}
}
}
print(class(tempTest$lstat))
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
if (j == 2){
#testVar <- data.frame(tempTest$lstat)
#colnames(testVar) <- c("lstat")
#resultsMatrix[i,j] = predict(tempMod, testVar)
predict(tempTest)
} else {
#resultsMatrix[i,j] = predict(tempMod, data.frame(tempTest[,1:j]))
predict(tempMod, tempTest)
}
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
if (j == 2){
#testVar <- data.frame(tempTest$lstat)
#colnames(testVar) <- c("lstat")
#resultsMatrix[i,j] = predict(tempMod, testVar)
predict(tempMod, tempTest)
} else {
#resultsMatrix[i,j] = predict(tempMod, data.frame(tempTest[,1:j]))
predict(tempMod, tempTest)
}
}
}
print(class(tempTest$lstat))
?predictTemp
?predict
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predicTemp - tempTest)^2)/(dim(TempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest)^2)/(dim(TempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest)^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[,1])^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
print(tempTest[,1])
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[,1])^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
print(dim(tempTest))
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[,1])^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
print(dim(tempTest[1]))
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[,1])^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
print(dim(tempTest)[1])
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[,1])^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
print(tempTest[1])
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[,1])^2)/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
resultsMatrix[i,j] <- sum((predictTemp - tempTest[1])^2)/(dim(tempTest)[1])
}
}
print(tempTest[1])
print(tempTest$medv)
print(predictTemp)
print(unname(predictTemp))
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2)
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[i,j] <- SSE/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[i,j] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix)
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[j,i] <- SSE/(dim(tempTest)[1])
}
}
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[i,j - 1] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix)
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[j - 1,i] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix)
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[j - 1,i] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix[1:5])
print(resultsMatrix[6:10])
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[j - 1,i] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix[,1:5])
print(resultsMatrix[,6:10])
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[j - 1,i] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix)
?apply
means <- apply(X = resultsMatrix, MARGIN = 'rows', FUN = 'mean')
means <- apply(X = resultsMatrix, MARGIN = 1, FUN = 'mean')
means <- apply(X = resultsMatrix, MARGIN = 1, FUN = 'mean')
means
plot(means)
CV_MSE <- apply(X = resultsMatrix, MARGIN = 1, FUN = 'mean')
CV_MSE
cvdframe <- data.frame(cbind(1:6, CV_MSE.values))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_scatter(aes(x = `Num. Variables`, y = `CV MSE`))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
scale_x_discrete(breaks=c("1","2","3", "4","5","6"))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
scale_x_discrete(breaks=c("1","2","3", "4","5","6"), labels = c("1","2","3","4","5","6"))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
scale_x_continuous(breaks=c("1","2","3", "4","5","6"), labels = c("1","2","3","4","5","6"))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
scale_x_continuous(breaks=seq(1,6, by = 1))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
geom_line(aes(x = `Num. Variables`, y = `CV MSE`, color = 'red')) +
scale_x_continuous(breaks=seq(1,6, by = 1))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
geom_line(aes(x = `Num. Variables`, y = `CV MSE`), color = 'red') +
scale_x_continuous(breaks=seq(1,6, by = 1))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
geom_line(aes(x = `Num. Variables`, y = `CV MSE`), color = 'red') +
labs(plot.title = "Cross Validation MSE vs. Number of Variables") +
scale_x_continuous(breaks=seq(1,6, by = 1)) +
theme(plot.title = element_text(h_just = 0.5))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
geom_line(aes(x = `Num. Variables`, y = `CV MSE`), color = 'red') +
labs(plot.title = "Cross Validation MSE vs. Number of Variables") +
scale_x_continuous(breaks=seq(1,6, by = 1)) +
theme(plot.title = element_text(hjust = 0.5))
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
geom_line(aes(x = `Num. Variables`, y = `CV MSE`), color = 'red') +
labs(title = "Cross Validation MSE vs. Number of Variables") +
scale_x_continuous(breaks=seq(1,6, by = 1)) +
theme(plot.title = element_text(hjust = 0.5))
bestModel <- lm("medv ~ lstat + rm + ptratio", data = Boston)
bestModel <- lm("medv ~ lstat + rm + ptratio", data = Boston)
bestModel$coefficients
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- (1/10)*(SSE + 2 *(k + 1)*s2full)
log(10)
exp(2.302585)
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- (1/10)*(SSE + 2 *(k + 1)*s2full)
AIC <- (1/s2full)*(SSE + 2 *(k + 1)*s2full)
BIC <- (1/s2full)*(SSE + log(10) *(k + 1)*s2full)
r2adj <- 1 - ((SSE/SST)*(10 - 1)/(10 - k - 1))
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- (1/10)*(SSE + 2 *(k + 1)*s2full)
AIC <- (1/s2full)*(SSE + 2 *(k + 1)*s2full)
BIC <- (1/s2full)*(SSE + log(10) *(k + 1)*s2full)
r2adj <- 1 - ((SSE/SST)*(10 - 1)/(10 - k - 1))
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- (1/10)*(SSE + 2 *(k + 1)*s2full)
AIC <- (1/s2full)*(SSE + 2 *(k + 1)*s2full)
BIC <- (1/s2full)*(SSE + log(10) *(k + 1)*s2full)
r2adj <- 1 - ((SSE/SST)*(10 - 1)/(10 - k - 1))
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
sumFrame
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- (1/s2full)*(SSE + 2 *(k + 1)*s2full)
BIC <- (1/s2full)*(SSE + log(10) *(k + 1)*s2full)
r2adj <- 1 - ((SSE/SST)*(10 - 1)/(10 - k - 1))
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
sumFrame
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- round((1/s2full)*(SSE + 2 *(k + 1)*s2full),3)
BIC <- (1/s2full)*(SSE + log(10) *(k + 1)*s2full)
r2adj <- 1 - ((SSE/SST)*(10 - 1)/(10 - k - 1))
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
sumFrame
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- round((1/s2full)*(SSE + 2 *(k + 1)*s2full),3)
BIC <- round((1/s2full)*(SSE + log(10) *(k + 1)*s2full),3)
r2adj <- round(1 - ((SSE/SST)*(10 - 1)/(10 - k - 1)),3)
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
sumFrame
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- round((1/s2full)*(SSE + 2 *(k + 1)*s2full),3)
BIC <- round((1/s2full)*(SSE + log(10) *(k + 1)*s2full),3)
r2adj <- round(1 - ((SSE/SST)*(10 - 1)/(10 - k - 1)),3)
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
colnames(sumFrame$) <- c("Model", "SSE", "Cp", "AIC", "BIC", "R^2adj")
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- round((1/s2full)*(SSE + 2 *(k + 1)*s2full),3)
BIC <- round((1/s2full)*(SSE + log(10) *(k + 1)*s2full),3)
r2adj <- round(1 - ((SSE/SST)*(10 - 1)/(10 - k - 1)),3)
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
colnames(sumFrame) <- c("Model", "SSE", "Cp", "AIC", "BIC", "R^2adj")
sumFrame
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- round((1/s2full)*(SSE + 2 *(k + 1)*s2full),3)
BIC <- round((1/s2full)*(SSE + (log(10) *(k + 1)*s2full)),3)
r2adj <- round(1 - ((SSE/SST)*(10 - 1)/(10 - k - 1)),3)
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
colnames(sumFrame) <- c("Model", "SSE", "Cp", "AIC", "BIC", "R^2adj")
sumFrame
library(MASS)
library(ggplot2)
library(leaps)
Boston$chas <- factor(Boston$chas)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(leaps)
Boston$chas <- factor(Boston$chas)
bestSubset <- leaps::regsubsets(medv ~., data = Boston, method = "exhaustive",
nvmax = dim(Boston)[2] - 1)
summary(bestSubset)$outmat
eStatdf<-data.frame(cbind(1:6, summary(bestSubset)$cp[1:6],
summary(bestSubset)$bic[1:6],summary(bestSubset)$adjr2[1:6]))
colnames(eStatdf) <- c("Model #", "Cp", "BIC", "Adj. R Squared")
eStatdf
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(ggplot2)
library(leaps)
Boston$chas <- factor(Boston$chas)
bestSubset <- leaps::regsubsets(medv ~., data = Boston, method = "exhaustive",
nvmax = dim(Boston)[2] - 1)
summary(bestSubset)$outmat
eStatdf<-data.frame(cbind(1:6, summary(bestSubset)$cp[1:6],
summary(bestSubset)$bic[1:6],summary(bestSubset)$adjr2[1:6]))
colnames(eStatdf) <- c("Model #", "Cp", "BIC", "Adj. R Squared")
eStatdf
forSubset <- leaps::regsubsets(medv ~., data = Boston, method = "forward",
nvmax = dim(Boston)[2] - 1)
backSubset <- leaps::regsubsets(medv ~., data = Boston, method = "backward",
nvmax = dim(Boston)[2] - 1)
summary(forSubset)$outmat
summary(backSubset)$outmat
featSelect<-data.frame(1:6,cbind(c("lstat", "rm", "ptratio","dis","nox","chas"),
c("lstat", "rm", "ptratio","dis","nox","black")))
colnames(featSelect) <- c("Model Number", "Var. forward", "Var. backward")
featSelect
BestFowModel <- lm("medv ~ lstat + rm + ptratio + dis + nox + chas",
data = Boston)
backModel <- lm("medv ~ lstat + rm + ptratio + dis + nox + black",
data = Boston)
print("Coefficients for Best Subset and forward model:")
summary(BestFowModel)$coefficients
print("Coefficients for Backward Model:")
summary(backModel)$coefficients
set.seed(1)
dataCV <- subset.data.frame(Boston, select = c("medv","lstat", "rm","ptratio",
"dis", "nox","chas"))
obs <-1:dim(dataCV)[1]
samples <- list()
for(i in 1:10){
if(i < 10){
samples[[i]] <- sample(obs,size=(as.integer(0.1 * dim(dataCV)[1]) + (i %%2)))
obs <- setdiff(obs, unlist(samples))
} else {
samples[[i]] <- setdiff(obs, samples)
}
}
resultsMatrix <- matrix(nrow = 6, ncol = 10)
rownames(resultsMatrix) = c("Model 1", "Model 2", "Model 3",
"Model 4", "Model 5", "Model 6")
for (i in 1:10){
for (j in 2:7){
tempTrain <- dataCV[setdiff(1:506, samples[[i]]),1:j]
tempTest <- dataCV[samples[[i]],1:j]
tempMod <- lm("medv ~.", data = tempTrain)
predictTemp <- predict(tempMod, tempTest)
SSE <- sum(unname(predictTemp) - tempTest$medv)^2
resultsMatrix[j - 1,i] <- SSE/(dim(tempTest)[1])
}
}
print(resultsMatrix)
CV_MSE <- apply(X = resultsMatrix, MARGIN = 1, FUN = 'mean')
CV_MSE
cvdframe <- data.frame(cbind(1:6, unname(CV_MSE)))
colnames(cvdframe) <- c("Num. Variables", "CV MSE")
ggplot(data = cvdframe) + geom_point(aes(x = `Num. Variables`, y = `CV MSE`)) +
geom_line(aes(x = `Num. Variables`, y = `CV MSE`), color = 'red') +
labs(title = "Cross Validation MSE vs. Number of Variables") +
scale_x_continuous(breaks=seq(1,6, by = 1)) +
theme(plot.title = element_text(hjust = 0.5))
bestModel <- lm("medv ~ lstat + rm + ptratio", data = Boston)
bestModel$coefficients
SSE <- c(25,9.5, 18,15,8.25,6.25,5.06,3.05)
SST <- 25
k <- c(0,1,1,1,2,2,2,3)
s2full = 3.05/7
Cp <- round((1/10)*(SSE + 2 *(k + 1)*s2full),3)
AIC <- round((1/s2full)*(SSE + 2 *(k + 1)*s2full),3)
BIC <- round((1/s2full)*(SSE + (log(10) *(k + 1)*s2full)),3)
r2adj <- round(1 - ((SSE/SST)*(10 - 1)/(10 - k - 1)),3)
sumFrame <- data.frame(cbind(1:8, SSE, Cp, AIC, BIC, r2adj))
colnames(sumFrame) <- c("Model", "SSE", "Cp", "AIC", "BIC", "R^2adj")
sumFrame
